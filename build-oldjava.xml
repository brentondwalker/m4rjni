<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<!--
This version uses javah to generate the c headers from the java code in Mzd.java.
That was deprecated after java 8, so the current build.xml uses the new nativeHeaderDir
attribute to generate the headers with javac.  I'm checking in this older version in 
case someone wants to build it with java 8 or older.
-->

<project name="m4rijni" default="jni" basedir=".">

  <property name="version" value="0.1"/>
  <property name="buildnumber" value="1"/>
  <property name="junit.output.dir" value="junit"/>
  
  <path id="JUnit 4.libraryclasspath">
    <pathelement location="lib/junit.jar"/>
    <pathelement location="lib/hamcrest-core-1.3.jar"/>
  </path>
  
  <path id="m4rjni.classpath">
    <pathelement location="bin"/>
    <path refid="JUnit 4.libraryclasspath"/>
  </path>
  
  <!--
      <property environment="env"/>
      <echo message="JAVA_HOME is set to = ${env.JAVA_HOME}" />
      <echoproperties/>
  -->

  <tstamp>
    <format property="this_year" pattern="yyyy"/>
  </tstamp>

  <property name="copyright" value="Copyright &#xa9; ${this_year} Brenton Walker"/>
  
  <target name="build" description="Compile the classes">
    <mkdir dir="bin"/>
    <javac srcdir="src/" destdir="bin" deprecation="on" includeantruntime="false" />
  </target>

  <target name="test" depends="jni,m4rjni.MzdTest" />
  <target name="m4rjni.MzdTest">
    <javac srcdir="test/" destdir="bin" deprecation="on" includeantruntime="false">
      <classpath refid="m4rjni.classpath"/>
    </javac>
    <mkdir dir="${junit.output.dir}"/>
    <!-- the fork=yes here is essential, since we want the VM invoked with a different java.library.path -->
    <junit fork="yes" printsummary="yes">
      <formatter type="xml"/>
      <classpath>
	<path refid="m4rjni.classpath" />
	<fileset dir="lib">
          <include name="**/junit.jar" />
        </fileset>
      </classpath>
      <test name="m4rjni.MzdTest" todir="${junit.output.dir}"/>
      <sysproperty key="java.library.path" value="${java.library.path}:${user.dir}/lib"/>
      <env key="LD_LIBRARY_PATH" path="${env.LD_LIBRARY_PATH}:lib" />
    </junit>
  </target>

  <target name="headers" depends="build" description="Create JNI header">
    <javah destdir="./jni" force="yes" classpath="bin" class="m4rjni.Mzd" />
  </target>
  
  <target name="jni"  depends="headers" description="Build the JNI lib">
    <mkdir dir="lib"/>
    <exec executable="gcc">
      <arg line="-c" />
      <arg line="-std=gnu99" />
      <arg line="-fPIC"/>
      <arg line="jni/m4rjni.c" />
      <arg line="-o lib/m4rjni.o" />
      <arg line="-I${java.home}/../include/" />
      <arg line="-I${java.home}/../include/linux/" />
      <arg line="-Iext/m4ri-20130416/" />
    </exec>
    <exec executable="gcc">
      <arg line="-shared" />
      <arg line="-Llib" />
      <arg line="lib/m4rjni.o" />
      <arg line="-o lib/libm4rjni.so" />
      <arg line="-lm4ri" />
    </exec>
  </target>
  
  <target name="m4ri" description="Build the m4ri library from source">
    <!-- the latest release of m4ri (20140914) is full of bugs!  Use the older version. -->
    <exec executable="bash">
      <arg line="-c 'cd ext; tar zxf m4ri-20130416.tar.gz; cd m4ri-20130416; ./configure; make' " />
    </exec>
    <copy todir="lib">
      <fileset dir="ext/m4ri-20130416/.libs" />
      <globmapper from="*.so" to="*.so" />
    </copy>
  </target>	

  <target name="docs">
    <exec executable="javadoc">
      <arg line="-d docs" />
      <arg line="-sourcepath src" />
      <arg line="-windowtitle m4rjni" />
      <arg line="m4rjni" />
    </exec>
  </target>
  
  <target name="jar" depends="jni">
    <delete file="m4rjni.jar"/>
    <delete file="MANIFEST.MF"/>
    <manifest file="MANIFEST.MF">
      <attribute name="Manifest-Version" value="1.0"/>
      <attribute name="Main-Class" value="Mzd"/>
      <attribute name="Class-Path" value="bin"/>
    </manifest>
    <jar destfile="m4rjni.jar" manifest="MANIFEST.MF">
      <fileset dir="bin" includes="**/*.class" />
      <fileset dir="src" includes="**/*.java" />
    </jar>
  </target>

  <target name="clean">
    <delete dir="./bin"/>
    <delete dir="./junit"/>
    <delete dir="./ext/m4ri-20130416"/>
    <delete file="./lib/m4rjni.o"/>
    <delete file="./lib/libm4rjni.so"/>
    <delete file="./jni/m4rjni_Mzd.h"/>
    <delete>
      <fileset dir="lib" includes="*.so"/>
      <fileset dir="lib" includes="*.o"/>
    </delete>
    <!-- <delete file="./jni/m4rjni_Mzd.h"/> -->
  </target>
  
</project>
